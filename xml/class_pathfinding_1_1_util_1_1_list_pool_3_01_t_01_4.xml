<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4" kind="class" prot="public">
    <compoundname>Pathfinding::Util::ListPool&lt; T &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1ab6ad55c53f34fdb105734bf2e65f41e8" prot="private" static="yes" mutable="no">
        <type>List&lt; List&lt; T &gt; &gt;</type>
        <definition>List&lt;List&lt;T&gt; &gt; pool</definition>
        <argsstring></argsstring>
        <name>pool</name>
        <briefdescription>
<para>Internal pool. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="26" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a16d9ef3b011833ea8215c905da9ad715" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MaxCapacitySearchLength</definition>
        <argsstring></argsstring>
        <name>MaxCapacitySearchLength</name>
        <initializer>= 8</initializer>
        <briefdescription>
<para>When requesting a list with a specified capacity, search max this many lists in the pool before giving up. </para>        </briefdescription>
        <detaileddescription>
<para>Must be greater or equal to one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="31" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a34556ee80009c22aa59ce79dfa6554f5" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>static</type>
        <definition>static ListPool</definition>
        <argsstring>()</argsstring>
        <name>ListPool</name>
        <briefdescription>
<para>Static constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="35" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="34" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a86d6293f943c45eeb7a14cb2597e25e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>List&lt; T &gt;</type>
        <definition>static List&lt;T&gt; Claim</definition>
        <argsstring>()</argsstring>
        <name>Claim</name>
        <briefdescription>
<para>Claim a list. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pooled list if any are in the pool. Otherwise it creates a new one. After usage, this list should be released using the Release function (though not strictly necessary). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="44" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="44" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1aa05f6d95c6e328d8f05c652d4e999a58" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>List&lt; T &gt;</type>
        <definition>static List&lt;T&gt; Claim</definition>
        <argsstring>(int capacity)</argsstring>
        <name>Claim</name>
        <param>
          <type>int</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Claim a list with minimum capacity Returns a pooled list if any are in the pool. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise it creates a new one. After usage, this list should be released using the Release function (though not strictly necessary). This list returned will have at least the capacity specified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="64" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="64" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1ade633bf8b439e2bb742c72215c632b19" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clears the pool for lists of this type. </para>        </briefdescription>
        <detaileddescription>
<para>This is an O(n) operation, where n is the number of pooled lists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="127" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a605940bf5e3b6094672f8869ae099076" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int GetSize</definition>
        <argsstring>()</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Number of lists of this type in the pool. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="132" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a51dd3b0d96a473aaee6d035fdb79e930" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Release</definition>
        <argsstring>(List&lt; T &gt; list)</argsstring>
        <name>Release</name>
        <param>
          <type>List&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Releases a list. </para>        </briefdescription>
        <detaileddescription>
<para>After the list has been released it should not be used anymore.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>System.InvalidOperationException</parametername>
</parameternamelist>
<parameterdescription>
<para>Releasing a list when it has already been released will cause an exception to be thrown.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a86d6293f943c45eeb7a14cb2597e25e4" kindref="member">Claim</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="110" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="110" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1ae4ae447874ab3cc82deaccc517ebd6ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Warmup</definition>
        <argsstring>(int count, int size)</argsstring>
        <name>Warmup</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Makes sure the pool contains at least <emphasis>count</emphasis> pooled items with capacity <emphasis>size</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This is good if you want to do all allocations at start. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="96" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="96" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Lightweight List Pool. </para>    </briefdescription>
    <detaileddescription>
<para>Handy class for pooling lists of type T.</para><para>Usage:<itemizedlist>
<listitem><para>Claim a new list using<programlisting><codeline><highlight class="normal">List&lt;SomeClass&gt;<sp/>foo<sp/>=<sp/>ListPool&lt;SomeClass&gt;.Claim<sp/>();<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>Use it and do stuff with it</para></listitem><listitem><para>Release it with<programlisting><codeline><highlight class="normal">ListPool&lt;SomeClass&gt;.Release<sp/>(foo);<sp/></highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para>You do not need to clear the list before releasing it. After you have released a list, you should never use it again.</para><para><simplesect kind="since"><para>Version 3.2 </para></simplesect>
<simplesect kind="see"><para>Pathfinding.Util.StackPool </para></simplesect>
</para>    </detaileddescription>
    <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" line="24" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Core/Misc/ListPool.cs" bodystart="23" bodyend="135"/>
    <listofallmembers>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a86d6293f943c45eeb7a14cb2597e25e4" prot="public" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>Claim</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1aa05f6d95c6e328d8f05c652d4e999a58" prot="public" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>Claim</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1ade633bf8b439e2bb742c72215c632b19" prot="public" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>Clear</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a605940bf5e3b6094672f8869ae099076" prot="public" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>GetSize</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a34556ee80009c22aa59ce79dfa6554f5" prot="private" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>ListPool</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a16d9ef3b011833ea8215c905da9ad715" prot="private" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>MaxCapacitySearchLength</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1ab6ad55c53f34fdb105734bf2e65f41e8" prot="private" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>pool</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1a51dd3b0d96a473aaee6d035fdb79e930" prot="public" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>Release</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_list_pool_3_01_t_01_4_1ae4ae447874ab3cc82deaccc517ebd6ab" prot="public" virt="non-virtual"><scope>Pathfinding::Util::ListPool&lt; T &gt;</scope><name>Warmup</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
