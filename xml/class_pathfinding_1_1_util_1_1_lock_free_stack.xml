<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="class_pathfinding_1_1_util_1_1_lock_free_stack" kind="class" prot="public">
    <compoundname>Pathfinding::Util::LockFreeStack</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_pathfinding_1_1_util_1_1_lock_free_stack_1a2d33912acc757b02cd97bdbc22be2f23" prot="public" static="no" mutable="no">
        <type><ref refid="class_pathfinding_1_1_path" kindref="compound">Path</ref></type>
        <definition>Path head</definition>
        <argsstring></argsstring>
        <name>head</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/LockFreeStack.cs" line="12" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/LockFreeStack.cs" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_lock_free_stack_1a9edf4fcd6c592fca36dcdbc143ca8a23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pathfinding_1_1_path" kindref="compound">Path</ref></type>
        <definition>Path PopAll</definition>
        <argsstring>()</argsstring>
        <name>PopAll</name>
        <briefdescription>
<para>Pops all items from the stack and returns the head. </para>        </briefdescription>
        <detaileddescription>
<para>To loop through all popped items, simple traverse the linked list starting with the head and continuing with item.next until item equals null <programlisting><codeline><highlight class="normal">Path<sp/>p<sp/>=<sp/>stack.PopAll<sp/>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>null)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p.next;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/LockFreeStack.cs" line="47" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/LockFreeStack.cs" bodystart="47" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_util_1_1_lock_free_stack_1af623200b4620f4460af4303ae752d8b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Push</definition>
        <argsstring>(Path p)</argsstring>
        <name>Push</name>
        <param>
          <type><ref refid="class_pathfinding_1_1_path" kindref="compound">Path</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Pushes a path onto the stack. </para>        </briefdescription>
        <detaileddescription>
<para>Will loop while trying to set the head of the stack to <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/LockFreeStack.cs" line="20" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/LockFreeStack.cs" bodystart="20" bodyend="35"/>
        <references refid="class_pathfinding_1_1_path_1a8184493e27bfcdffd5f32e6dde4c0364" compoundref="_path_8cs" startline="98">Path.next</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a lock free multiple producer - single consumer stack for the <ref refid="class_pathfinding_1_1_path" kindref="compound">Path</ref> object. </para>    </briefdescription>
    <detaileddescription>
<para>Though it probably works for multiple producer - multiple consumer as well. <xrefsect id="todo_1_todo000015"><xreftitle>Todo</xreftitle><xrefdescription><para>Add SINGLE_THREAD_OPTIMIZE define </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <collaborationgraph>
      <node id="2259">
        <label>NNConstraint</label>
        <link refid="class_pathfinding_1_1_n_n_constraint"/>
      </node>
      <node id="2255">
        <label>GraphNode</label>
        <link refid="class_pathfinding_1_1_graph_node"/>
      </node>
      <node id="2253">
        <label>Path</label>
        <link refid="class_pathfinding_1_1_path"/>
        <childnode refid="2254" relation="usage">
          <edgelabel>currentR</edgelabel>
        </childnode>
        <childnode refid="2256" relation="usage">
          <edgelabel>pathHandler</edgelabel>
        </childnode>
        <childnode refid="2258" relation="usage">
          <edgelabel>callTime</edgelabel>
          <edgelabel>stateLock</edgelabel>
        </childnode>
        <childnode refid="2253" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="2255" relation="usage">
          <edgelabel>_path</edgelabel>
        </childnode>
        <childnode refid="2259" relation="usage">
          <edgelabel>nnConstraint</edgelabel>
        </childnode>
      </node>
      <node id="2258">
        <label>System</label>
      </node>
      <node id="2254">
        <label>PathNode</label>
        <link refid="class_pathfinding_1_1_path_node"/>
        <childnode refid="2254" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="2255" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
      </node>
      <node id="2252">
        <label>LockFreeStack</label>
        <link refid="class_pathfinding_1_1_util_1_1_lock_free_stack"/>
        <childnode refid="2253" relation="usage">
          <edgelabel>head</edgelabel>
        </childnode>
      </node>
      <node id="2257">
        <label>BinaryHeapM</label>
        <link refid="class_pathfinding_1_1_binary_heap_m"/>
        <childnode refid="2254" relation="usage">
          <edgelabel>binaryHeap</edgelabel>
        </childnode>
      </node>
      <node id="2256">
        <label>PathHandler</label>
        <link refid="class_pathfinding_1_1_path_handler"/>
        <childnode refid="2254" relation="usage">
          <edgelabel>nodes</edgelabel>
        </childnode>
        <childnode refid="2257" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="2258" relation="usage">
          <edgelabel>DebugStringBuilder</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/LockFreeStack.cs" line="10" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/LockFreeStack.cs" bodystart="10" bodyend="58"/>
    <listofallmembers>
      <member refid="class_pathfinding_1_1_util_1_1_lock_free_stack_1a2d33912acc757b02cd97bdbc22be2f23" prot="public" virt="non-virtual"><scope>Pathfinding::Util::LockFreeStack</scope><name>head</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_lock_free_stack_1a9edf4fcd6c592fca36dcdbc143ca8a23" prot="public" virt="non-virtual"><scope>Pathfinding::Util::LockFreeStack</scope><name>PopAll</name></member>
      <member refid="class_pathfinding_1_1_util_1_1_lock_free_stack_1af623200b4620f4460af4303ae752d8b1" prot="public" virt="non-virtual"><scope>Pathfinding::Util::LockFreeStack</scope><name>Push</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
