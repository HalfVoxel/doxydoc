<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="_a_b_path_8cs" kind="file">
    <compoundname>ABPath.cs</compoundname>
    <innerclass refid="class_pathfinding_1_1_a_b_path" prot="public">Pathfinding::ABPath</innerclass>
    <innernamespace refid="namespace_pathfinding">Pathfinding</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#define<sp/>ASTAR_MORE_PATH_IDS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>ASTAR_NO_LOGGING<sp/>//Disables<sp/>path<sp/>error<sp/>logging<sp/>totally.<sp/>This<sp/>also<sp/>reduces<sp/>memory<sp/>allocations<sp/>because<sp/>the<sp/>logging<sp/>strings<sp/>will<sp/>not<sp/>be<sp/>allocated.<sp/>It<sp/>does<sp/>not<sp/>affect<sp/>normal<sp/>logging<sp/>calls,<sp/>only<sp/>error<sp/>calls<sp/>since<sp/>they<sp/>are<sp/>allocated<sp/>even<sp/>though<sp/>they<sp/>are<sp/>not<sp/>logged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>ASTAR_LOCK_FREE_PATH_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>UnityEngine;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Pathfinding;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Pathfinding<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//Mem<sp/>-<sp/>4+1+4+1+[4]+[4]+1+1+4+4+4+4+4+<sp/><sp/>12+12+12+12+12+12+4+4+4+4+4+1+1+(4)+4+4+4+4+4+4+4<sp/>?<sp/>166<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="19" refid="class_pathfinding_1_1_a_b_path" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_pathfinding_1_1_a_b_path" kindref="compound" tooltip="Basic path, finds the shortest path from A to B.">ABPath</ref><sp/>:<sp/><ref refid="class_pathfinding_1_1_path" kindref="compound" tooltip="Base class for all path types.">Path</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28" refid="class_pathfinding_1_1_a_b_path_1a74922c8fa0a20f25467dd438c1c3634e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a74922c8fa0a20f25467dd438c1c3634e" kindref="member" tooltip="Defines if start and end nodes will have their connection costs recalculated for this path...">recalcStartEndCosts</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30" refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>;<sp/></highlight></codeline>
<codeline lineno="31" refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34" refid="class_pathfinding_1_1_a_b_path_1a71973f1506071f3eba34ebd31ac7c947" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a71973f1506071f3eba34ebd31ac7c947" kindref="member" tooltip="Hints can be set to enable faster Get Nearest Node queries.">startHint</ref>;</highlight></codeline>
<codeline lineno="36" refid="class_pathfinding_1_1_a_b_path_1a318279692ce4b7907ff8023c4ce158b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a318279692ce4b7907ff8023c4ce158b8" kindref="member" tooltip="Hints can be set to enable faster Get Nearest Node queries.">endHint</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39" refid="class_pathfinding_1_1_a_b_path_1a417900a77d5a24cb3bcdb4b4d61dbc2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a417900a77d5a24cb3bcdb4b4d61dbc2a" kindref="member" tooltip="Start Point exactly as in the path request.">originalStartPoint</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="class_pathfinding_1_1_a_b_path_1a5e07633cbeb18046b1f3d77f2eb68ea5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a5e07633cbeb18046b1f3d77f2eb68ea5" kindref="member" tooltip="End Point exactly as in the path request.">originalEndPoint</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45" refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48" refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" kindref="member" tooltip="Exact end point of the path.">endPoint</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53" refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="class_pathfinding_1_1_a_b_path_1af4d8428e71a7b0038bd3055a3cecb27a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af4d8428e71a7b0038bd3055a3cecb27a" kindref="member" tooltip="Start point in integer coordinates.">startIntPoint</ref>;<sp/></highlight></codeline>
<codeline lineno="56" refid="class_pathfinding_1_1_a_b_path_1a11c7b93ed5be4c0679e162e16c4be2b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a11c7b93ed5be4c0679e162e16c4be2b5" kindref="member" tooltip="Target to use for H score calculations.">hTarget</ref>;<sp/></highlight></codeline>
<codeline lineno="66" refid="class_pathfinding_1_1_a_b_path_1adb241127befc08aa01a5696f071e8c93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1adb241127befc08aa01a5696f071e8c93" kindref="member" tooltip="Calculate partial path if the target node cannot be reached.">calculatePartial</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_path_node" kindref="compound">PathNode</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" kindref="member" tooltip="Current best target for the partial path.">partialBestTarget</ref><sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="class_pathfinding_1_1_a_b_path_1af9b6b879aaed98de511033cabdebbc57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/><ref refid="class_pathfinding_1_1_a_b_path_1af9b6b879aaed98de511033cabdebbc57" kindref="member" tooltip="Saved original costs for the end node.">endNodeCosts</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[System.Obsolete(</highlight><highlight class="stringliteral">&quot;Use<sp/>PathPool&lt;T&gt;.GetPath<sp/>instead&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="80" refid="class_pathfinding_1_1_a_b_path_1aed424dd172492ee22a01211440753c08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1aed424dd172492ee22a01211440753c08" kindref="member" tooltip="Create a new path with a start and end point.">ABPath</ref><sp/>(Vector3<sp/>start,<sp/>Vector3<sp/>end,<sp/>OnPathDelegate<sp/>callbackDelegate)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a298cb68f7f3fb7f40595f4302af4ae25" kindref="member" tooltip="Reset all values to their default values.">Reset</ref><sp/>();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Setup<sp/>(start,<sp/>end,<sp/>callbackDelegate);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97" refid="class_pathfinding_1_1_a_b_path_1aa3950b68381cf8cd95c2a82ef744753b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1aa3950b68381cf8cd95c2a82ef744753b" kindref="member" tooltip="Default constructor.">ABPath</ref><sp/>()<sp/>{}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="class_pathfinding_1_1_a_b_path_1a58d78e505137ad33617197f0a63af464" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path" kindref="compound" tooltip="Basic path, finds the shortest path from A to B.">ABPath</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a58d78e505137ad33617197f0a63af464" kindref="member" tooltip="Construct a path with a start and end point.">Construct</ref><sp/>(Vector3<sp/>start,<sp/>Vector3<sp/>end,<sp/>OnPathDelegate<sp/><ref refid="class_pathfinding_1_1_path_1a1283a0bbb6c7864c345cb12e1cf1dcaa" kindref="member" tooltip="Callback to call when the path is complete.">callback</ref><sp/>=<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path" kindref="compound" tooltip="Basic path, finds the shortest path from A to B.">ABPath</ref><sp/>p<sp/>=<sp/>PathPool&lt;ABPath&gt;.GetPath<sp/>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.Setup<sp/>(start,<sp/>end,<sp/><ref refid="class_pathfinding_1_1_path_1a1283a0bbb6c7864c345cb12e1cf1dcaa" kindref="member" tooltip="Callback to call when the path is complete.">callback</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Setup<sp/>(Vector3<sp/>start,<sp/>Vector3<sp/>end,<sp/>OnPathDelegate<sp/>callbackDelegate)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a1283a0bbb6c7864c345cb12e1cf1dcaa" kindref="member" tooltip="Callback to call when the path is complete.">callback</ref><sp/>=<sp/>callbackDelegate;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a4c89bab10e4aefbd85bde0da35deb5ca" kindref="member" tooltip="Sets the start and end points.">UpdateStartEnd</ref><sp/>(start,end);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119" refid="class_pathfinding_1_1_a_b_path_1a0732cc3fcf2d10c459947d8ba529dce2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a0732cc3fcf2d10c459947d8ba529dce2" kindref="member">GetHTarget</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a11c7b93ed5be4c0679e162e16c4be2b5" kindref="member" tooltip="Target to use for H score calculations.">hTarget</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125" refid="class_pathfinding_1_1_a_b_path_1a4c89bab10e4aefbd85bde0da35deb5ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a4c89bab10e4aefbd85bde0da35deb5ca" kindref="member" tooltip="Sets the start and end points.">UpdateStartEnd</ref><sp/>(Vector3<sp/>start,<sp/>Vector3<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a417900a77d5a24cb3bcdb4b4d61dbc2a" kindref="member" tooltip="Start Point exactly as in the path request.">originalStartPoint</ref><sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a5e07633cbeb18046b1f3d77f2eb68ea5" kindref="member" tooltip="End Point exactly as in the path request.">originalEndPoint</ref><sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref><sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" kindref="member" tooltip="Exact end point of the path.">endPoint</ref><sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af4d8428e71a7b0038bd3055a3cecb27a" kindref="member" tooltip="Start point in integer coordinates.">startIntPoint</ref><sp/>=<sp/>(<ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref>)start;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a11c7b93ed5be4c0679e162e16c4be2b5" kindref="member" tooltip="Target to use for H score calculations.">hTarget</ref><sp/>=<sp/>(<ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref>)end;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140" refid="class_pathfinding_1_1_a_b_path_1a298cb68f7f3fb7f40595f4302af4ae25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a298cb68f7f3fb7f40595f4302af4ae25" kindref="member" tooltip="Reset all values to their default values.">Reset</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base.Reset<sp/>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref><sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref><sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a71973f1506071f3eba34ebd31ac7c947" kindref="member" tooltip="Hints can be set to enable faster Get Nearest Node queries.">startHint</ref><sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a318279692ce4b7907ff8023c4ce158b8" kindref="member" tooltip="Hints can be set to enable faster Get Nearest Node queries.">endHint</ref><sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a417900a77d5a24cb3bcdb4b4d61dbc2a" kindref="member" tooltip="Start Point exactly as in the path request.">originalStartPoint</ref><sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a5e07633cbeb18046b1f3d77f2eb68ea5" kindref="member" tooltip="End Point exactly as in the path request.">originalEndPoint</ref><sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref><sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" kindref="member" tooltip="Exact end point of the path.">endPoint</ref><sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1adb241127befc08aa01a5696f071e8c93" kindref="member" tooltip="Calculate partial path if the target node cannot be reached.">calculatePartial</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" kindref="member" tooltip="Current best target for the partial path.">partialBestTarget</ref><sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af4d8428e71a7b0038bd3055a3cecb27a" kindref="member" tooltip="Start point in integer coordinates.">startIntPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref>();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a11c7b93ed5be4c0679e162e16c4be2b5" kindref="member" tooltip="Target to use for H score calculations.">hTarget</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref>();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af9b6b879aaed98de511033cabdebbc57" kindref="member" tooltip="Saved original costs for the end node.">endNodeCosts</ref><sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161" refid="class_pathfinding_1_1_a_b_path_1ab2bb7322e99c2d4acfad288364f7c690" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1ab2bb7322e99c2d4acfad288364f7c690" kindref="member" tooltip="Prepares the path.">Prepare</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_profiler" kindref="compound">AstarProfiler</ref>.StartProfile<sp/>(</highlight><highlight class="stringliteral">&quot;Get<sp/>Nearest&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>the<sp/>NNConstraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1af6ea73fa8f1c34669d3b2d1854758808" kindref="member" tooltip="Constraint for how to search for nodes.">nnConstraint</ref>.<ref refid="class_pathfinding_1_1_n_n_constraint_1ae5a306487e101c6a14ebe525b492ffd0" kindref="member" tooltip="Nodes which have any of these tags set are suitable.">tags</ref><sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1a764d3ed2e9a2b25171ed02c6b4f6e165" kindref="member" tooltip="Which graph tags are traversable.">enabledTags</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_pathfinding_1_1_n_n_info" kindref="compound">NNInfo</ref><sp/>startNNInfo<sp/><sp/>=<sp/><ref refid="class_astar_path" kindref="compound" tooltip="Main Pathfinding System.">AstarPath</ref>.<ref refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" kindref="member" tooltip="Returns the active AstarPath object in the scene.">active</ref>.<ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member" tooltip="Returns the nearest node to a position using the specified NNConstraint.">GetNearest</ref><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref>,<ref refid="class_pathfinding_1_1_path_1af6ea73fa8f1c34669d3b2d1854758808" kindref="member" tooltip="Constraint for how to search for nodes.">nnConstraint</ref>,<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a71973f1506071f3eba34ebd31ac7c947" kindref="member" tooltip="Hints can be set to enable faster Get Nearest Node queries.">startHint</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Tell<sp/>the<sp/>NNConstraint<sp/>which<sp/>node<sp/>was<sp/>found<sp/>as<sp/>the<sp/>start<sp/>node<sp/>if<sp/>it<sp/>is<sp/>a<sp/>PathNNConstraint<sp/>and<sp/>not<sp/>a<sp/>normal<sp/>NNConstraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_n_n_constraint" kindref="compound" tooltip="A special NNConstraint which can use different logic for the start node and end node in a path...">PathNNConstraint</ref><sp/>pathNNConstraint<sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1af6ea73fa8f1c34669d3b2d1854758808" kindref="member" tooltip="Constraint for how to search for nodes.">nnConstraint</ref><sp/>as<sp/><ref refid="class_pathfinding_1_1_path_n_n_constraint" kindref="compound" tooltip="A special NNConstraint which can use different logic for the start node and end node in a path...">PathNNConstraint</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pathNNConstraint<sp/>!=<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathNNConstraint.<ref refid="class_pathfinding_1_1_path_n_n_constraint_1a3ed990b84b616fb281b377fd063c91a4" kindref="member" tooltip="Called after the start node has been found.">SetStart</ref><sp/>(startNNInfo.<ref refid="struct_pathfinding_1_1_n_n_info_1ad38a0e14c26a92de3abc582d51413e1b" kindref="member" tooltip="Closest node found.">node</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref><sp/>=<sp/>startNNInfo.<ref refid="struct_pathfinding_1_1_n_n_info_1aac8223b67a0a5d063ebda9757f232351" kindref="member" tooltip="The position clamped to the closest point on the node.">clampedPosition</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af4d8428e71a7b0038bd3055a3cecb27a" kindref="member" tooltip="Start point in integer coordinates.">startIntPoint</ref><sp/>=<sp/>(<ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref>)<ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref><sp/>=<sp/>startNNInfo.<ref refid="struct_pathfinding_1_1_n_n_info_1ad38a0e14c26a92de3abc582d51413e1b" kindref="member" tooltip="Closest node found.">node</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>it<sp/>is<sp/>declared<sp/>that<sp/>this<sp/>path<sp/>type<sp/>has<sp/>an<sp/>end<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Some<sp/>path<sp/>types<sp/>might<sp/>want<sp/>to<sp/>use<sp/>most<sp/>of<sp/>the<sp/>ABPath<sp/>code,<sp/>but<sp/>will<sp/>not<sp/>have<sp/>an<sp/>explicit<sp/>end<sp/>point<sp/>at<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref>)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_pathfinding_1_1_n_n_info" kindref="compound">NNInfo</ref><sp/>endNNInfo<sp/>=<sp/><ref refid="class_astar_path" kindref="compound" tooltip="Main Pathfinding System.">AstarPath</ref>.<ref refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" kindref="member" tooltip="Returns the active AstarPath object in the scene.">active</ref>.<ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member" tooltip="Returns the nearest node to a position using the specified NNConstraint.">GetNearest</ref><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" kindref="member" tooltip="Exact end point of the path.">endPoint</ref>,<ref refid="class_pathfinding_1_1_path_1af6ea73fa8f1c34669d3b2d1854758808" kindref="member" tooltip="Constraint for how to search for nodes.">nnConstraint</ref>,<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a318279692ce4b7907ff8023c4ce158b8" kindref="member" tooltip="Hints can be set to enable faster Get Nearest Node queries.">endHint</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" kindref="member" tooltip="Exact end point of the path.">endPoint</ref><sp/>=<sp/>endNNInfo.<ref refid="struct_pathfinding_1_1_n_n_info_1aac8223b67a0a5d063ebda9757f232351" kindref="member" tooltip="The position clamped to the closest point on the node.">clampedPosition</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a11c7b93ed5be4c0679e162e16c4be2b5" kindref="member" tooltip="Target to use for H score calculations.">hTarget</ref><sp/>=<sp/>(<ref refid="struct_pathfinding_1_1_int3" kindref="compound" tooltip="Holds a coordinate in integers.">Int3</ref>)<ref refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" kindref="member" tooltip="Exact end point of the path.">endPoint</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref><sp/>=<sp/>endNNInfo.<ref refid="struct_pathfinding_1_1_n_n_info_1ad38a0e14c26a92de3abc582d51413e1b" kindref="member" tooltip="Closest node found.">node</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_profiler" kindref="compound">AstarProfiler</ref>.EndProfile<sp/>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ASTARDEBUG</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.DrawLine<sp/>((Vector3)<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>.Position,<ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref>,Color.blue);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.DrawLine<sp/>((Vector3)<ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>.Position,<ref refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" kindref="member" tooltip="Exact end point of the path.">endPoint</ref>,Color.blue);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref><sp/>==<sp/>null<sp/>&amp;&amp;<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref><sp/>&amp;&amp;<sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref><sp/>==<sp/>null))<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae3e49dfe18c8b7e01e3d9772eb3a17eb" kindref="member" tooltip="Aborts the path because of an error.">Error</ref><sp/>();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a53e15c71b68b0a643f3b6e539e72527a" kindref="member" tooltip="Appends msg to errorLog and logs msg to the console.">LogError</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>close<sp/>nodes<sp/>to<sp/>the<sp/>start<sp/>point<sp/>or<sp/>the<sp/>end<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref><sp/>==<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae3e49dfe18c8b7e01e3d9772eb3a17eb" kindref="member" tooltip="Aborts the path because of an error.">Error</ref><sp/>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a53e15c71b68b0a643f3b6e539e72527a" kindref="member" tooltip="Appends msg to errorLog and logs msg to the console.">LogError</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>a<sp/>close<sp/>node<sp/>to<sp/>the<sp/>start<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref><sp/>==<sp/>null<sp/>&amp;&amp;<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae3e49dfe18c8b7e01e3d9772eb3a17eb" kindref="member" tooltip="Aborts the path because of an error.">Error</ref><sp/>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a53e15c71b68b0a643f3b6e539e72527a" kindref="member" tooltip="Appends msg to errorLog and logs msg to the console.">LogError</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>a<sp/>close<sp/>node<sp/>to<sp/>the<sp/>end<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>.Walkable)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ASTARDEBUG</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.DrawRay<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref>,Vector3.up,Color.red);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.DrawLine<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref>,(Vector3)<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>.Position,Color.red);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae3e49dfe18c8b7e01e3d9772eb3a17eb" kindref="member" tooltip="Aborts the path because of an error.">Error</ref><sp/>();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a53e15c71b68b0a643f3b6e539e72527a" kindref="member" tooltip="Appends msg to errorLog and logs msg to the console.">LogError</ref><sp/>(</highlight><highlight class="stringliteral">&quot;The<sp/>node<sp/>closest<sp/>to<sp/>the<sp/>start<sp/>point<sp/>is<sp/>not<sp/>walkable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref><sp/>&amp;&amp;<sp/>!<ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>.Walkable)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae3e49dfe18c8b7e01e3d9772eb3a17eb" kindref="member" tooltip="Aborts the path because of an error.">Error</ref><sp/>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a53e15c71b68b0a643f3b6e539e72527a" kindref="member" tooltip="Appends msg to errorLog and logs msg to the console.">LogError</ref><sp/>(</highlight><highlight class="stringliteral">&quot;The<sp/>node<sp/>closest<sp/>to<sp/>the<sp/>end<sp/>point<sp/>is<sp/>not<sp/>walkable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref><sp/>&amp;&amp;<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>.Region<sp/>!=<sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>.Region)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae3e49dfe18c8b7e01e3d9772eb3a17eb" kindref="member" tooltip="Aborts the path because of an error.">Error</ref><sp/>();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a53e15c71b68b0a643f3b6e539e72527a" kindref="member" tooltip="Appends msg to errorLog and logs msg to the console.">LogError</ref><sp/>(</highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>no<sp/>valid<sp/>path<sp/>to<sp/>the<sp/>target<sp/>(start<sp/>area:<sp/>&quot;</highlight><highlight class="normal">+<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>.Region+</highlight><highlight class="stringliteral">&quot;,<sp/>target<sp/>area:<sp/>&quot;</highlight><highlight class="normal">+<ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>.Region+</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234" refid="class_pathfinding_1_1_a_b_path_1ae272c57053102794b03f581e91d8be05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1ae272c57053102794b03f581e91d8be05" kindref="member" tooltip="Initializes the path.">Initialize</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref><sp/>&amp;&amp;<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref><sp/>==<sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_node" kindref="compound">PathNode</ref><sp/>endNodeR<sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>.GetPathNode<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endNodeR.node<sp/>=<sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endNodeR.parent<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endNodeR.H<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endNodeR.G<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a97fb5f73bba5ea3580f8e09bbc05d2ac" kindref="member" tooltip="Traces the calculated path from the end node to the start.">Trace</ref><sp/>(endNodeR);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae7e61764a09f9184c43bc8723f803e6d" kindref="member" tooltip="Current state of the path.">CompleteState</ref><sp/>=<sp/>PathCompleteState.Complete;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Adjust<sp/>the<sp/>costs<sp/>for<sp/>the<sp/>end<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(hasEndPoint<sp/>&amp;&amp;<sp/>recalcStartEndCosts)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endNodeCosts<sp/>=<sp/>endNode.InitialOpen<sp/>(open,hTarget,(Int3)endPoint,this,false);</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback<sp/>+=<sp/>ResetCosts;<sp/>/*<sp/>\todo<sp/>Might<sp/>interfere<sp/>with<sp/>other<sp/>paths<sp/>since<sp/>other<sp/>paths<sp/>might<sp/>be<sp/>calculated<sp/>before<sp/>#callback<sp/>is<sp/>called<sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_node" kindref="compound">PathNode</ref><sp/>startRNode<sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>.GetPathNode<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startRNode.node<sp/>=<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startRNode.pathID<sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1a7f58d0f5c9ee7555995152b8a249ee90" kindref="member" tooltip="ID of this path.">pathID</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startRNode.parent<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startRNode.cost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startRNode.G<sp/>=<sp/>GetTraversalCost<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startRNode.H<sp/>=<sp/>CalculateHScore<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(recalcStartEndCosts)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startNode.InitialOpen<sp/>(open,hTarget,startIntPoint,this,true);</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>.<ref refid="class_pathfinding_1_1_graph_node_1ab98353ee3302ae9dbbe8d2e846162555" kindref="member" tooltip="Open the node.">Open</ref><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,startRNode,<ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1af8e7a9c8893e8da14adfc4b4751297cc" kindref="member" tooltip="Number of nodes this path has searched.">searchedNodes</ref>++;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" kindref="member" tooltip="Current best target for the partial path.">partialBestTarget</ref><sp/>=<sp/>startRNode;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//any<sp/>nodes<sp/>left<sp/>to<sp/>search?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>.HeapEmpty<sp/>())<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1adb241127befc08aa01a5696f071e8c93" kindref="member" tooltip="Calculate partial path if the target node cannot be reached.">calculatePartial</ref>)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae7e61764a09f9184c43bc8723f803e6d" kindref="member" tooltip="Current state of the path.">CompleteState</ref><sp/>=<sp/>PathCompleteState.Partial;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a97fb5f73bba5ea3580f8e09bbc05d2ac" kindref="member" tooltip="Traces the calculated path from the end node to the start.">Trace</ref><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" kindref="member" tooltip="Current best target for the partial path.">partialBestTarget</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae3e49dfe18c8b7e01e3d9772eb3a17eb" kindref="member" tooltip="Aborts the path because of an error.">Error</ref><sp/>();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a53e15c71b68b0a643f3b6e539e72527a" kindref="member" tooltip="Appends msg to errorLog and logs msg to the console.">LogError</ref><sp/>(</highlight><highlight class="stringliteral">&quot;No<sp/>open<sp/>points,<sp/>the<sp/>start<sp/>node<sp/>didn&apos;t<sp/>open<sp/>any<sp/>nodes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a927fdf14b05fdd95422e8ca4ce3d02ed" kindref="member" tooltip="The node currently being processed.">currentR</ref><sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>.PopNode<sp/>();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307" refid="class_pathfinding_1_1_a_b_path_1aa63015d1bad188af63199d957f84b614" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1aa63015d1bad188af63199d957f84b614" kindref="member" tooltip="Calculates the path until completed or until the time has passed targetTick.">CalculateStep</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>targetTick)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Continue<sp/>to<sp/>search<sp/>while<sp/>there<sp/>hasn&apos;t<sp/>ocurred<sp/>an<sp/>error<sp/>and<sp/>the<sp/>end<sp/>hasn&apos;t<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1ae7e61764a09f9184c43bc8723f803e6d" kindref="member" tooltip="Current state of the path.">CompleteState</ref><sp/>==<sp/>PathCompleteState.NotCalculated)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1af8e7a9c8893e8da14adfc4b4751297cc" kindref="member" tooltip="Number of nodes this path has searched.">searchedNodes</ref>++;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Close<sp/>the<sp/>current<sp/>node,<sp/>if<sp/>the<sp/>current<sp/>node<sp/>is<sp/>the<sp/>target<sp/>node<sp/>then<sp/>the<sp/>path<sp/>is<sp/>finished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1a927fdf14b05fdd95422e8ca4ce3d02ed" kindref="member" tooltip="The node currently being processed.">currentR</ref>.node<sp/>==<sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae7e61764a09f9184c43bc8723f803e6d" kindref="member" tooltip="Current state of the path.">CompleteState</ref><sp/>=<sp/>PathCompleteState.Complete;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1a927fdf14b05fdd95422e8ca4ce3d02ed" kindref="member" tooltip="The node currently being processed.">currentR</ref>.H<sp/>&lt;<sp/><ref refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" kindref="member" tooltip="Current best target for the partial path.">partialBestTarget</ref>.H)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" kindref="member" tooltip="Current best target for the partial path.">partialBestTarget</ref><sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1a927fdf14b05fdd95422e8ca4ce3d02ed" kindref="member" tooltip="The node currently being processed.">currentR</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_profiler" kindref="compound">AstarProfiler</ref>.StartFastProfile<sp/>(4);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>through<sp/>all<sp/>walkable<sp/>neighbours<sp/>of<sp/>the<sp/>node<sp/>and<sp/>add<sp/>them<sp/>to<sp/>the<sp/>open<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a927fdf14b05fdd95422e8ca4ce3d02ed" kindref="member" tooltip="The node currently being processed.">currentR</ref>.node.<ref refid="class_pathfinding_1_1_graph_node_1ab98353ee3302ae9dbbe8d2e846162555" kindref="member" tooltip="Open the node.">Open</ref><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="class_pathfinding_1_1_path_1a927fdf14b05fdd95422e8ca4ce3d02ed" kindref="member" tooltip="The node currently being processed.">currentR</ref>,<ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_profiler" kindref="compound">AstarProfiler</ref>.EndFastProfile<sp/>(4);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//any<sp/>nodes<sp/>left<sp/>to<sp/>search?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>.HeapEmpty())<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae3e49dfe18c8b7e01e3d9772eb3a17eb" kindref="member" tooltip="Aborts the path because of an error.">Error</ref><sp/>();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a53e15c71b68b0a643f3b6e539e72527a" kindref="member" tooltip="Appends msg to errorLog and logs msg to the console.">LogError</ref><sp/>(</highlight><highlight class="stringliteral">&quot;No<sp/>open<sp/>points,<sp/>whole<sp/>area<sp/>searched&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Select<sp/>the<sp/>node<sp/>with<sp/>the<sp/>lowest<sp/>F<sp/>score<sp/>and<sp/>remove<sp/>it<sp/>from<sp/>the<sp/>open<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_profiler" kindref="compound">AstarProfiler</ref>.StartFastProfile<sp/>(7);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a927fdf14b05fdd95422e8ca4ce3d02ed" kindref="member" tooltip="The node currently being processed.">currentR</ref><sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>.PopNode<sp/>();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_profiler" kindref="compound">AstarProfiler</ref>.EndFastProfile<sp/>(7);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Debug.Log<sp/>(&quot;Popping<sp/>node<sp/>&quot;<sp/>+<sp/>currentR.node.NodeIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>for<sp/>time<sp/>every<sp/>500<sp/>nodes,<sp/>roughly<sp/>every<sp/>0.5<sp/>ms<sp/>usually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counter<sp/>&gt;<sp/>500)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Have<sp/>we<sp/>exceded<sp/>the<sp/>maxFrameTime,<sp/>if<sp/>so<sp/>we<sp/>should<sp/>wait<sp/>one<sp/>frame<sp/>before<sp/>continuing<sp/>the<sp/>search<sp/>since<sp/>we<sp/>don&apos;t<sp/>want<sp/>the<sp/>game<sp/>to<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(System.DateTime.UtcNow.Ticks<sp/>&gt;=<sp/>targetTick)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Return<sp/>instead<sp/>of<sp/>yield&apos;ing,<sp/>a<sp/>separate<sp/>function<sp/>handles<sp/>the<sp/>yield<sp/>(CalculatePaths)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_profiler" kindref="compound">AstarProfiler</ref>.StartProfile<sp/>(</highlight><highlight class="stringliteral">&quot;Trace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1ae7e61764a09f9184c43bc8723f803e6d" kindref="member" tooltip="Current state of the path.">CompleteState</ref><sp/>==<sp/>PathCompleteState.Complete)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a97fb5f73bba5ea3580f8e09bbc05d2ac" kindref="member" tooltip="Traces the calculated path from the end node to the start.">Trace</ref><sp/>(<ref refid="class_pathfinding_1_1_path_1a927fdf14b05fdd95422e8ca4ce3d02ed" kindref="member" tooltip="The node currently being processed.">currentR</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1adb241127befc08aa01a5696f071e8c93" kindref="member" tooltip="Calculate partial path if the target node cannot be reached.">calculatePartial</ref><sp/>&amp;&amp;<sp/><ref refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" kindref="member" tooltip="Current best target for the partial path.">partialBestTarget</ref><sp/>!=<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1ae7e61764a09f9184c43bc8723f803e6d" kindref="member" tooltip="Current state of the path.">CompleteState</ref><sp/>=<sp/>PathCompleteState.Partial;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_1a97fb5f73bba5ea3580f8e09bbc05d2ac" kindref="member" tooltip="Traces the calculated path from the end node to the start.">Trace</ref><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1abfcd57c901158325c54300743fe44078" kindref="member" tooltip="Current best target for the partial path.">partialBestTarget</ref>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_profiler" kindref="compound">AstarProfiler</ref>.EndProfile<sp/>();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377" refid="class_pathfinding_1_1_a_b_path_1aeea74c6c45fc8f7f63ff8702e0bf6946" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1aeea74c6c45fc8f7f63ff8702e0bf6946" kindref="member" tooltip="Resets End Node Costs.">ResetCosts</ref><sp/>(<ref refid="class_pathfinding_1_1_path" kindref="compound" tooltip="Base class for all path types.">Path</ref><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FALSE</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>.ResetCosts<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1af9b6b879aaed98de511033cabdebbc57" kindref="member" tooltip="Saved original costs for the end node.">endNodeCosts</ref>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>builder<sp/>used<sp/>for<sp/>all<sp/>debug<sp/>logging<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>static<sp/>System.Text.StringBuilder<sp/>debugStringBuilder<sp/>=<sp/>new<sp/>System.Text.StringBuilder<sp/>();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="390" refid="class_pathfinding_1_1_a_b_path_1a4c052d07cb6f0ab2c714c64f6c5810ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a4c052d07cb6f0ab2c714c64f6c5810ed" kindref="member" tooltip="Returns a debug string for this path.">DebugString</ref><sp/>(PathLog<sp/>logMode)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logMode<sp/>==<sp/>PathLog.None<sp/>||<sp/>(!<ref refid="class_pathfinding_1_1_path_1a7a3172cc98e93d8eadfb9ab30373799e" kindref="member" tooltip="If the path failed, this is true.">error</ref><sp/>&amp;&amp;<sp/>logMode<sp/>==<sp/>PathLog.OnlyErrors))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//debugStringBuilder.Length<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.Text.StringBuilder<sp/>text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>System.Text.StringBuilder<sp/>();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(<ref refid="class_pathfinding_1_1_path_1a7a3172cc98e93d8eadfb9ab30373799e" kindref="member" tooltip="If the path failed, this is true.">error</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>Failed<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>Completed<sp/>:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;Computation<sp/>Time<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>((<ref refid="class_pathfinding_1_1_path_1a66625d8d6c0894b4828b43f826a09b8f" kindref="member" tooltip="The duration of this path in ms.">duration</ref>).ToString<sp/>(logMode<sp/>==<sp/>PathLog.Heavy<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;0.000&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0.00&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>ms<sp/>Searched<sp/>Nodes<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(<ref refid="class_pathfinding_1_1_path_1af8e7a9c8893e8da14adfc4b4751297cc" kindref="member" tooltip="Number of nodes this path has searched.">searchedNodes</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_pathfinding_1_1_path_1a7a3172cc98e93d8eadfb9ab30373799e" kindref="member" tooltip="If the path failed, this is true.">error</ref>)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>Path<sp/>Length<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(<ref refid="class_pathfinding_1_1_path_1ac76dd31632dd24f062d1949d77af84d2" kindref="member" tooltip="Holds the path as a Node array.">path</ref><sp/>==<sp/>null<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Null&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="class_pathfinding_1_1_path_1ac76dd31632dd24f062d1949d77af84d2" kindref="member" tooltip="Holds the path as a Node array.">path</ref>.Count.ToString<sp/>());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logMode<sp/>==<sp/>PathLog.Heavy)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\nSearch<sp/>Iterations<sp/>&quot;</highlight><highlight class="normal">+searchIterations);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a9170d0140c255ecc77ddd55b01fb1c00" kindref="member" tooltip="Determines if a search for an end node should be done.">hasEndPoint</ref><sp/>&amp;&amp;<sp/><ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref><sp/>!=<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pathfinding_1_1_path_node" kindref="compound">PathNode</ref><sp/>nodeR<sp/>=<sp/><ref refid="class_pathfinding_1_1_path_1a7dcbab6b828dabed9a14ca5874bd7958" kindref="member" tooltip="Data for the thread calculating this path.">pathHandler</ref>.<ref refid="class_pathfinding_1_1_path_handler_1a65bbf170027b25ee4026c25cd149d253" kindref="member" tooltip="Tries to get a NodeRun for a node.">TryGetPathNode</ref>(<ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodeR<sp/>!=<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\nEnd<sp/>Node\n<sp/><sp/>G:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(nodeR.G);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>H:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(nodeR.H);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>F:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(nodeR.F);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>Point:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(((Vector3)<ref refid="class_pathfinding_1_1_a_b_path_1ab08561da980cd37e8c922cea780c45eb" kindref="member" tooltip="Exact end point of the path.">endPoint</ref>).ToString<sp/>());</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>Graph:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1af18b6389a12a37404cbad29940993b89" kindref="member" tooltip="End node of the path.">endNode</ref>.GraphIndex);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\nEnd<sp/>Node:<sp/>Null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\nStart<sp/>Node&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>Point:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(((Vector3)<ref refid="class_pathfinding_1_1_a_b_path_1ac307764268b7cb29706e6fc22d893d97" kindref="member" tooltip="Exact start point of the path.">startPoint</ref>).ToString<sp/>());</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>Graph:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(<ref refid="class_pathfinding_1_1_a_b_path_1a20a2d6fc322886eb264c02e6c2cf6f7a" kindref="member" tooltip="Start node of the path.">startNode</ref>.GraphIndex);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//text.Append<sp/>(&quot;\nBinary<sp/>Heap<sp/>size<sp/>at<sp/>completion:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//text.Append<sp/>(pathHandler.open<sp/>==<sp/>null<sp/>?<sp/>&quot;Null&quot;<sp/>:<sp/>(pathHandler.open.numberOfItems-2).ToString<sp/>());//<sp/>-2<sp/>because<sp/>numberOfItems<sp/>includes<sp/>the<sp/>next<sp/>item<sp/>to<sp/>be<sp/>added<sp/>and<sp/>item<sp/>zero<sp/>is<sp/>not<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&quot;\nEnd<sp/>node\n<sp/>G<sp/>=<sp/>&quot;+p.endNode.g+&quot;\n<sp/><sp/><sp/>H<sp/>=<sp/>&quot;+p.endNode.H+&quot;\n<sp/><sp/><sp/>F<sp/>=<sp/>&quot;+p.endNode.f+&quot;\n<sp/><sp/><sp/>Point<sp/><sp/><sp/>&quot;+p.endPoint</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+&quot;\nStart<sp/>Point<sp/>=<sp/>&quot;+p.startPoint+&quot;\n&quot;+&quot;Start<sp/>Node<sp/>graph:<sp/>&quot;+p.startNode.graphIndex+&quot;<sp/>End<sp/>Node<sp/>graph:<sp/>&quot;+p.endNode.graphIndex+</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\nBinary<sp/>Heap<sp/>size<sp/>at<sp/>completion:<sp/>&quot;+(p.open<sp/>==<sp/>null<sp/>?<sp/>&quot;Null&quot;<sp/>:<sp/>p.open.numberOfItems.ToString<sp/>())*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1a7a3172cc98e93d8eadfb9ab30373799e" kindref="member" tooltip="If the path failed, this is true.">error</ref>)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\nError:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(<ref refid="class_pathfinding_1_1_path_1a0fd7bd65be2ae15aecab7278699acbb1" kindref="member" tooltip="Log messages with info about eventual errors.">errorLog</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(</highlight><highlight class="stringliteral">&quot;\nPath<sp/>Number<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.Append<sp/>(<ref refid="class_pathfinding_1_1_path_1a7f58d0f5c9ee7555995152b8a249ee90" kindref="member" tooltip="ID of this path.">pathID</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text.ToString<sp/>();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="457" refid="class_pathfinding_1_1_a_b_path_1a3c2c0ffe22b4599ca66ea6552851a546" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_a_b_path_1a3c2c0ffe22b4599ca66ea6552851a546" kindref="member" tooltip="Recycle the path.">Recycle</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PathPool&lt;ABPath&gt;.Recycle<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Movement<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="467" refid="class_pathfinding_1_1_a_b_path_1a9403daa81b78d5a7c1249981309267ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_pathfinding_1_1_a_b_path_1a9403daa81b78d5a7c1249981309267ae" kindref="member" tooltip="Returns in which direction to move from a point on the path.">GetMovementVector</ref><sp/>(Vector3<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1a606d877ec5788bbbf53311a2dff80ffd" kindref="member" tooltip="Holds the (perhaps post processed) path as a Vector3 array.">vectorPath</ref><sp/>==<sp/>null<sp/>||<sp/><ref refid="class_pathfinding_1_1_path_1a606d877ec5788bbbf53311a2dff80ffd" kindref="member" tooltip="Holds the (perhaps post processed) path as a Vector3 array.">vectorPath</ref>.Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_pathfinding_1_1_path_1a606d877ec5788bbbf53311a2dff80ffd" kindref="member" tooltip="Holds the (perhaps post processed) path as a Vector3 array.">vectorPath</ref>.Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_path_1a606d877ec5788bbbf53311a2dff80ffd" kindref="member" tooltip="Holds the (perhaps post processed) path as a Vector3 array.">vectorPath</ref>[0]-point;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minDist<sp/>=<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.PositiveInfinity;</highlight><highlight class="comment">//Mathf.Infinity;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minSegment<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_pathfinding_1_1_path_1a606d877ec5788bbbf53311a2dff80ffd" kindref="member" tooltip="Holds the (perhaps post processed) path as a Vector3 array.">vectorPath</ref>.Count-1;i++)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>closest<sp/>=<sp/><ref refid="class_pathfinding_1_1_mathfx" kindref="compound" tooltip="Utility functions for working with numbers, lines and vectors.">Mathfx</ref>.<ref refid="class_pathfinding_1_1_mathfx_1a2926797ed93d260436300fda33d60875" kindref="member" tooltip="Returns the closest point on the line segment.">NearestPointStrict</ref><sp/>(<ref refid="class_pathfinding_1_1_path_1a606d877ec5788bbbf53311a2dff80ffd" kindref="member" tooltip="Holds the (perhaps post processed) path as a Vector3 array.">vectorPath</ref>[i],<ref refid="class_pathfinding_1_1_path_1a606d877ec5788bbbf53311a2dff80ffd" kindref="member" tooltip="Holds the (perhaps post processed) path as a Vector3 array.">vectorPath</ref>[i+1],point);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>(closest-point).sqrMagnitude;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>minDist)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minSegment<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_pathfinding_1_1_path_1a606d877ec5788bbbf53311a2dff80ffd" kindref="member" tooltip="Holds the (perhaps post processed) path as a Vector3 array.">vectorPath</ref>[minSegment+1]-point;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Pathfinders/ABPath.cs"/>
  </compounddef>
</doxygen>
