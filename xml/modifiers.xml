<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="modifiers" kind="page">
    <compoundname>modifiers</compoundname>
    <title>Using Modifiers</title>
    <detaileddescription>
<para>Modifiers are small scripts which can hook in to the <ref refid="class_seeker" kindref="compound">Seeker</ref> and pre and or post process the path before it is returned to the caller.</para><para><linebreak/>
 This can for example be a Raycast Modfier which removes unecessary nodes in a path to make it shorter but still valid.<linebreak/>
 Or a Smooth Modifier which subdivides the path and smooths it to make it more aesthetically appealing.<linebreak/>
 Modifiers are ordered by priority, modifiers with higher priority will execute before those with a lower priority.<linebreak/>
 The order of execution can be a bit tricky in some cases, for example if one is using the StartEndPoint modifier and Simple Smooth Modifier, which one should have the higher priority?<linebreak/>
 In this case StartEndPoint should have the higher priority because otherwise, the path would be smoothed first, and then the first and last points would be modified and that would look bad.<linebreak/>
 Each modifier has an <emphasis>input</emphasis> and an <emphasis>output</emphasis>, they are there to simplify the task of setting the correct priority values. The <ref refid="class_seeker" kindref="compound">Seeker</ref> component will show a warning if one modifier&apos;s output cannot be converted to the next one&apos;s input. <simplesect kind="see"><para><ref refid="namespace_pathfinding_1ae82dbd8faf6cfefaa3e3008c186a20e5" kindref="member">Pathfinding::ModifierData</ref></para></simplesect>
</para><sect1 id="modifiers_1simplesmooth">
<title>Simple Smooth Modifier</title>
<para>The simple smooth modifier is a modifier to smooth the path. It can do that either by just subdividing it and moving the vertices closer to each other or use splines, namely the Bezier curve.<linebreak/>
 Below are two images showing a path with the smooth modifier turned off first and then on. Note that the smoothed path cuts the corners a bit, this can be a problem with the smooth modifier since it does not take world geometry into account when smoothing. <image type="html" name="smoothModifier_off.png"></image>
 <htmlonly> &lt;div class=&quot;tinyshadow&quot;&gt;&lt;img src=&quot;images/smoothModifier_on_noshadow.png&quot;/&gt;&lt;/div&gt;</htmlonly> For variable documentation, look at the <ref refid="class_simple_smooth_modifier" kindref="compound">Simple Smooth Modifier documentation </ref></para></sect1>
<sect1 id="modifiers_1funnel">
<title>Funnel Modifier</title>
<para>The <ref refid="class_funnel_modifier" kindref="compound">funnel modifier </ref> is a modifier for simplifying paths on navmeshes or grid graphs is a fast and exact way.<linebreak/>
 As the name implies it applies the <ulink url="http://digestingduck.blogspot.com/2010/03/simple-stupid-funnel-algorithm.html">funnel algorithm</ulink> to the path.<linebreak/>
 This will return the shortest path inside the path corridor the pathfinder calculated<linebreak/>
 <image type="html" name="funnelModifier_on.png"></image>
 </para><sect2 id="modifiers_1Variables">
<title>Variables</title>
<para><table rows="1" cols="2"><row>
<entry thead="yes"><para>Priority </para></entry><entry thead="no"><para><para>Higher priority modifiers are executed first. </para>  </para></entry></row>
</table>
</para><para>See also: <ref refid="write-modifiers_1write-modifiers" kindref="member">Writing Modifiers</ref> </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
