<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="tags" kind="page">
    <compoundname>tags</compoundname>
    <title>Working with tags</title>
    <detaileddescription>
<para>Tagging nodes and areas is a powerful feature.</para><para>It is used to restrict which units can walk on what ground.<linebreak/>
 Imagine for example that you have some critters, a player and some AIs in your world. Both the AIs and the critters pathfind randomly around in the world but you wouldn&apos;t want the critters to enter houses (they make such a mess). Then tagging is a great way to solve it. If you tag all indoor areas with a tag named &quot;Indoors&quot; and make sure no critters can walk on those nodes, that would be it!</para><para>Here&apos;s a video showing the features of tagging and the <ref refid="class_graph_update_scene" kindref="compound">GraphUpdateScene</ref> component which is a great help for tagging areas.</para><para><htmlonly> 
&lt;iframe width=&quot;633&quot; height=&quot;400&quot; src=&quot;http://www.youtube.com/embed/dClgmO9pfWg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
</htmlonly></para><para>Tagging is done so that first, you mark some nodes with a tag. Then on the <ref refid="class_seeker" kindref="compound">Seeker</ref> component there is a setting for &quot;Valid Tags&quot; this setting, which is popup you can set which tags should be traversable by that unit. The first tag (usually named &quot;Basic Ground&quot;) is set on all nodes at start. Then when pathfinding, the seeker will set which tags the path should be able to traverse (the ones you set in the editor), and it will try to find a path using that contraint. When searching for the closest node, it will also make sure that a node which has a valid tag set will be chosen.<linebreak/>
 Below is an image of a <ref refid="class_seeker" kindref="compound">Seeker</ref> component which can traverse all tags except the restricted area tags. <htmlonly> &lt;div class=&quot;tinyshadow&quot;&gt;&lt;img src=&quot;images/tagpopup.png&quot;/&gt;&lt;/div&gt;</htmlonly> One thing to note though, is that one optimization the system does is to flood fill areas so it knows if a valid path can be found from one point to another point. However, it cannot do that for all tags, so if two regions are separated by a region with another tag, but still walkable, those regions will all share the same area id. This means that if a unit starts at one of the regions and tries to find a path to the other region but it cannot traverse the region in the middle, it will search every node it can reach before stopping which can take some extra time.</para><para>As said above, the <ref refid="class_graph_update_scene" kindref="compound">GraphUpdateScene</ref> component is a great help when tagging nodes. It has got a setting for &quot;Modify Tags&quot;, which sets if it should modify the tags of the nodes in the polygon, and also &quot;Set Tag&quot; which defines which tag to mark the nodes with if &quot;Modify Tags&quot; is set to true. For some help on how to use the <ref refid="class_graph_update_scene" kindref="compound">GraphUpdateScene</ref> component, take a look at the <ref refid="graph-updates" kindref="compound">Graph Updates</ref> page.</para><para>You can debug tags by changing the debug mode to Tags in A* Inspector <ndash/>&gt; Settings <ndash/>&gt; Debug <ndash/>&gt; Path Debug Mode (and make sure Show Graphs is toggled). This will render the graphs so that each tag get&apos;s a specific color which allows you to separate them easily.</para><para>Tags can also be named for ease of use. In A* Inspector <ndash/>&gt; Settings <ndash/>&gt; Tags you can set the names of the tags. These names will then be used in all tag selection fields. <htmlonly> &lt;div class=&quot;tinyshadow&quot;&gt;&lt;img src=&quot;images/tagNames.png&quot;/&gt;&lt;/div&gt;</htmlonly> </para>    </detaileddescription>
  </compounddef>
</doxygen>
