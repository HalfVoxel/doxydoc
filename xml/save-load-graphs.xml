<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="save-load-graphs" kind="page">
    <compoundname>save-load-graphs</compoundname>
    <title>Saving and Loading Graphs</title>
    <detaileddescription>
<para>Saving and Loading Graphs.</para><para>All graphs can be saved and loaded from files. The is actually what the editor does all the time, barely any Unity serialization is used, instead all graph settings are serialized and stored in a byte array. However, not only settings can be saved, once calculated, a graph can save all nodes to a compact byte array representation, which can then be saved to a file and loaded somewhere else.<linebreak/>
 In the A* inspector, under the Save &amp; Load tab, there are two buttons named &quot;Save to file&quot; and &quot;Load from file&quot;, these can be used to save and load graph files.</para><sect1 id="save-load-graphs_1caching">
<title>Caching Graph Calculation</title>
<para>Recalculating the graphs at startup is usually what you want, but sometimes especially if you are using the RecastGraph or developing for the iPhone or Android the lag at the start can get very annoying. It might also be the case that you cannot calculate the graph at startup for some reason.<linebreak/>
 Then graph caching is great. It enables you to scan the graph in the editor, save it to an internal byte array which will be loaded at startup. It is a lot faster than scanning the graphs in most cases and you know exactly how the graph will look.</para><para>To create a cache, open the Save &amp; Load tab in the A* inspector and check the Cache Startup toggle. Also make sure &quot;Save Node Data&quot; is toggled. Then simply click Generate Cache. It might also ask you if you want to rescan the graph before saving. Now the graph you saved will be loaded with all node info intact at startup, no calculation time necessary. <htmlonly> &lt;div class=&quot;tinyshadow&quot;&gt;&lt;img src=&quot;images/saveloadtab.png&quot;/&gt;&lt;/div&gt;</htmlonly></para></sect1>
<sect1 id="save-load-graphs_1saving">
<title>Saving Graphs to File and Loading them</title>
<para>You might also want to save the graphs to a file which you can load later. You can even load it during runtime from a server for example.</para><para>If you want to save your graphs, open the Save &amp; Load tab, and click the Save to file button. If you want to include node data in the graph, make sure Save Node Data is toggled.</para><para>When you want to load the graphs again, simply press the Load from file button and locate the file. Note that this will replace your current graphs.</para><sect2 id="save-load-graphs_1fromscript">
<title>Loading and Saving using Scripting</title>
<para>If you want to load or save graphs during runtime, you cannot use the editor interface for obvious reasons. So how do you do it then?</para><para>There is an easy API for saving and loading files.<linebreak/>
 This will serialize graph settings to a file <programlisting><codeline><highlight class="normal">byte[]<sp/>bytes<sp/>=<sp/><ref refid="class_astar_path" kindref="compound" tooltip="Main Pathfinding System.">AstarPath</ref>.<ref refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" kindref="member" tooltip="Returns the active AstarPath object in the scene.">active</ref>.<ref refid="class_astar_path_1ae505e02a52d4b9573e5d861ec48aa0ab" kindref="member" tooltip="Reference to the Pathfinding.AstarData object for this graph.">astarData</ref>.SerializeGraphs<sp/>();</highlight></codeline>
</programlisting> If you want more control, you can add some settings <programlisting><codeline><highlight class="normal">Pathfinding.Serialize.SerializeSettings<sp/>settings<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Pathfinding.Serialize.SerializeSettings();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//Save<sp/>node<sp/>info,<sp/>and<sp/>output<sp/>nice<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">settings.nodes<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">settings.prettyPrint<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">byte[]<sp/>bytes<sp/>=<sp/><ref refid="class_astar_path" kindref="compound" tooltip="Main Pathfinding System.">AstarPath</ref>.<ref refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" kindref="member" tooltip="Returns the active AstarPath object in the scene.">active</ref>.<ref refid="class_astar_path_1ae505e02a52d4b9573e5d861ec48aa0ab" kindref="member" tooltip="Reference to the Pathfinding.AstarData object for this graph.">astarData</ref>.SerializeGraphs<sp/>(settings);</highlight></codeline>
</programlisting></para><para>To load saved data there is an as simple call for that: <programlisting><codeline><highlight class="normal"><ref refid="class_astar_path" kindref="compound" tooltip="Main Pathfinding System.">AstarPath</ref>.<ref refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" kindref="member" tooltip="Returns the active AstarPath object in the scene.">active</ref>.<ref refid="class_astar_path_1ae505e02a52d4b9573e5d861ec48aa0ab" kindref="member" tooltip="Reference to the Pathfinding.AstarData object for this graph.">astarData</ref>.DeserializeGraphs<sp/>(bytes);</highlight></codeline>
</programlisting> If you only load settings, you might want to call Scan after you have loaded the settings: <programlisting><codeline><highlight class="normal"><ref refid="class_astar_path" kindref="compound" tooltip="Main Pathfinding System.">AstarPath</ref>.<ref refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" kindref="member" tooltip="Returns the active AstarPath object in the scene.">active</ref>.<ref refid="class_astar_path_1ae505e02a52d4b9573e5d861ec48aa0ab" kindref="member" tooltip="Reference to the Pathfinding.AstarData object for this graph.">astarData</ref>.DeserializeGraphs<sp/>(bytes);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_astar_path" kindref="compound" tooltip="Main Pathfinding System.">AstarPath</ref>.<ref refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" kindref="member" tooltip="Returns the active AstarPath object in the scene.">active</ref>.<ref refid="class_astar_path_1a69a25908bb9a9244e74df95d05001c77" kindref="member" tooltip="Scans all graphs.">Scan</ref>();</highlight></codeline>
</programlisting></para><sect3 id="save-load-graphs_1textasset">
<title>Including Data In A TextAsset</title>
<para>Graph data can be included in textassets for easier inclusion in the build. When you have saved the data to a file, rename that file to something like &quot;myGraph.bytes&quot; and place it in your Unity Project. This will tell Unity to handle it as binary information. With an extension like .txt the data would get corrupted because Unity would try to read it as text. Some operating systems like to hide the extension, so if Unity doesn&apos;t seem to recognize the file with the .bytes extension make sure it really has a .bytes extension, the .zip (or other) extension might just be hidden. Then you can load the graph from a text asset by referencing it in a variable, and the accessing the .bytes field. <programlisting><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>UnityEngine;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestLoader<sp/>:<sp/>MonoBehaviour<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TextAsset<sp/>graphData;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>this<sp/>for<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Start<sp/>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_astar_path" kindref="compound" tooltip="Main Pathfinding System.">AstarPath</ref>.<ref refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" kindref="member" tooltip="Returns the active AstarPath object in the scene.">active</ref>.<ref refid="class_astar_path_1ae505e02a52d4b9573e5d861ec48aa0ab" kindref="member" tooltip="Reference to the Pathfinding.AstarData object for this graph.">astarData</ref>.DeserializeGraphs<sp/>(graphData.bytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect3>
</sect2>
</sect1>
<sect1 id="save-load-graphs_1structure">
<title>Internal Data Structure</title>
<para>All settings are serialized to JSON. This is a good way to keep it forwards and backwards compatible. All files referred to below are compressed into a single zip file to make the size smaller and make it easier to handle the data. This means you can actually open the zip file up and edit the settings manually. <htmlonly> &lt;div class=&quot;tinyshadow&quot;&gt;&lt;img src=&quot;images/serializedInternal.png&quot;/&gt;&lt;/div&gt;</htmlonly></para><para><simplesect kind="note"><para>Many of the files mentioned below are not always included in the zip. If it is determined that a file would not contain any relevant information (such as saving user created connections, but no connections have been created), it is left out.</para></simplesect>
</para></sect1>
<sect1 id="save-load-graphs_1meta">
<title>Meta</title>
<para>A meta.json file is present in all serializations. This file contains information which is not connected to a specific graph, or is needed to load the other graphs.</para><para>The meta file contains<itemizedlist>
<listitem><para>Version number for the system</para></listitem><listitem><para>Number of graphs which are saved</para></listitem><listitem><para>GUID values for each graph, to identify them</para></listitem><listitem><para>Type of each graph</para></listitem><listitem><para>Number of nodes in each graph</para></listitem></itemizedlist>
</para><para>Below is an example of a meta.json file: <programlisting><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;3.0.9.5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;graphs&quot;</highlight><highlight class="normal">:<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;guids&quot;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0d83c93fc4928934-8362a8662ec4fb9d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;typeNames&quot;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pathfinding.GridGraph&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nodeCounts&quot;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10000</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="save-load-graphs_1graphinfo">
<title>Graph Settings</title>
<para>Settings for each graph is stored as &quot;graph#.json&quot; where # is the graph number. Here is an example of serialized settings for a grid graph (with some settings removed to keep the length down): <programlisting><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;aspectRatio&quot;</highlight><highlight class="normal">:1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rotation&quot;</highlight><highlight class="normal">:{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">:0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">:0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">:0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;center&quot;</highlight><highlight class="normal">:{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">:0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">:-0.1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">:0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unclampedSize&quot;</highlight><highlight class="normal">:{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">:100,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">:100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nodeSize&quot;</highlight><highlight class="normal">:1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;maxClimb&quot;</highlight><highlight class="normal">:0.4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;maxClimbAxis&quot;</highlight><highlight class="normal">:1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;maxSlope&quot;</highlight><highlight class="normal">:90,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;erodeIterations&quot;</highlight><highlight class="normal">:0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;autoLinkGrids&quot;</highlight><highlight class="normal">:</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;autoLinkDistLimit&quot;</highlight><highlight class="normal">:10,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;neighbours&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;Eight&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cutCorners&quot;</highlight><highlight class="normal">:</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;penaltyPositionOffset&quot;</highlight><highlight class="normal">:0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;penaltyPosition&quot;</highlight><highlight class="normal">:</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;penaltyPositionFactor&quot;</highlight><highlight class="normal">:1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;penaltyAngle&quot;</highlight><highlight class="normal">:</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;penaltyAngleFactor&quot;</highlight><highlight class="normal">:100,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;open&quot;</highlight><highlight class="normal">:</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;infoScreenOpen&quot;</highlight><highlight class="normal">:</highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Node information (if included in the serialized data) would take too much space to be included as JSON, instead it is written to binary data.</para><sect2 id="save-load-graphs_1nodes">
<title>Node Data</title>
<para>Node information is stored as &quot;graph#_nodes.binary&quot; where # is the graph number.</para><para><programlisting><codeline><highlight class="normal">an<sp/>Int32<sp/>with<sp/>the<sp/>value<sp/>1<sp/>to<sp/>identify<sp/>the<sp/>first<sp/>section</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for<sp/>each</highlight><highlight class="normal"><sp/>node<sp/>in<sp/>the<sp/>graph:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>y<sp/>z<sp/>coordinates<sp/>(type<sp/>Int32,<sp/>read<sp/>as<sp/>Int3,<sp/>node.position)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">an<sp/>Int32<sp/>with<sp/>the<sp/>value<sp/>2<sp/>to<sp/>identify<sp/>the<sp/>second<sp/>section</highlight></codeline>
<codeline><highlight class="normal">for<sp/>each<sp/>node<sp/>in<sp/>the<sp/>graph:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>penalty<sp/>(UInt32<sp/>Node.penalty)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">an<sp/>Int32<sp/>with<sp/>the<sp/>value<sp/>3<sp/>to<sp/>identify<sp/>the<sp/>third<sp/>section</highlight></codeline>
<codeline><highlight class="normal">for<sp/>each<sp/>node<sp/>in<sp/>the<sp/>graph:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>(Int32<sp/>Node.flags)</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="save-load-graphs_1connections">
<title>Node Connections</title>
<para>In addition to node specific information, node connections are stored in the file &quot;graph#_conns.binary&quot;.</para><para><programlisting><codeline><highlight class="keywordflow">for<sp/>each</highlight><highlight class="normal"><sp/>node<sp/>in<sp/>the<sp/>graph:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>number<sp/>of<sp/>connections<sp/>(UInt16)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>each<sp/>connection:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>node<sp/>index<sp/>(Int32)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection<sp/>cost<sp/>(Int32)</highlight></codeline>
</programlisting> <simplesect kind="see"><para>Pathfinding.Serialize.AstarSerializer.GetNodeWithIndex</para></simplesect>
</para></sect2>
<sect2 id="save-load-graphs_1extra">
<title>Extra Node Data</title>
<para>Every graph type has also the ability to save additional binary data for the nodes if necessary. If the graph overrides the SerializeExtraInfo and DeserializeExtraInfo functions extra binary data can be saved to the file &quot;graph#_extra.binary&quot;.</para></sect2>
<sect2 id="save-load-graphs_1userconns">
<title>User Created Connections</title>
<para>User created connections, or &quot;links&quot; are stored in the file &quot;connections.json&quot;. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
