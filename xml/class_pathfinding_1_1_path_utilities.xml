<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="class_pathfinding_1_1_path_utilities" kind="class" prot="public">
    <compoundname>Pathfinding::PathUtilities</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_pathfinding_1_1_path_utilities_1a4b4d32e1cdb83bf4fde98980e16afdc7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>List&lt; <ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref> &gt;</type>
        <definition>static List&lt;GraphNode&gt; GetReachableNodes</definition>
        <argsstring>(GraphNode seed, int tagMask=-1)</argsstring>
        <name>GetReachableNodes</name>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tagMask</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Returns all nodes reachable from the seed node. </para>        </briefdescription>
        <detaileddescription>
<para>This function performs a BFS (breadth-first-search) or flood fill of the graph and returns all nodes which can be reached from the seed node. In almost all cases this will be identical to returning all nodes which have the same area as the seed node. In the editor areas are displayed as different colors of the nodes. The only case where it will not be so is when there is a one way path from some part of the area to the seed node but no path from the seed node to that part of the graph.</para><para>The returned list is sorted by node distance from the seed node i.e distance is measured in the number of nodes the shortest path from <emphasis>seed</emphasis> to that node would pass through. Note that the distance measurement does not take heuristics, penalties or tag penalties.</para><para>Depending on the number of reachable nodes, this function can take quite some time to calculate so don&apos;t use it too often or it might affect the framerate of your game.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to start the search from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional mask for tags. This is a bitmask.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A List&lt;Node&gt; containing all nodes reachable from the seed node. For better memory management the returned list should be pooled, see Pathfinding.Util.ListPool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/PathUtilities.cs" line="61" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/PathUtilities.cs" bodystart="61" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_path_utilities_1a25736e29fdb41bc3f1d57abeaf2c8eef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsPathPossible</definition>
        <argsstring>(GraphNode n1, GraphNode n2)</argsstring>
        <name>IsPathPossible</name>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref></type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref></type>
          <declname>n2</declname>
        </param>
        <briefdescription>
<para>Returns if there is a walkable path from <emphasis>n1</emphasis> to <emphasis>n2</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If you are making changes to the graph, areas must first be recaculated using FloodFill() <simplesect kind="note"><para>This might return true for small areas even if there is no possible path if <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> is greater than zero (0). So when using this, it is recommended to set <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> to 0. (A* Inspector -&gt; Settings -&gt; <ref refid="namespace_pathfinding" kindref="compound">Pathfinding</ref>) </para></simplesect>
<simplesect kind="see"><para><ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member">AstarPath.GetNearest</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/PathUtilities.cs" line="25" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/PathUtilities.cs" bodystart="25" bodyend="27"/>
        <referencedby refid="class_pathfinding_1_1_graph_update_utilities_1afe580774d22ec32a2c7a4ce2cbc4d3fa" compoundref="_graph_update_utilities_8cs" startline="85" endline="123">GraphUpdateUtilities.UpdateGraphsNoBlock</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_path_utilities_1acfdea19e38150f03ad8893d9930f1044" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsPathPossible</definition>
        <argsstring>(List&lt; GraphNode &gt; nodes)</argsstring>
        <name>IsPathPossible</name>
        <param>
          <type>List&lt; <ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref> &gt;</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
<para>Returns if there are walkable paths between all nodes. </para>        </briefdescription>
        <detaileddescription>
<para>If you are making changes to the graph, areas must first be recaculated using FloodFill() <simplesect kind="note"><para>This might return true for small areas even if there is no possible path if <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> is greater than zero (0). So when using this, it is recommended to set <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> to 0. (A* Inspector -&gt; Settings -&gt; <ref refid="namespace_pathfinding" kindref="compound">Pathfinding</ref>) </para></simplesect>
<simplesect kind="see"><para><ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member">AstarPath.GetNearest</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/PathUtilities.cs" line="35" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/PathUtilities.cs" bodystart="35" bodyend="39"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains useful functions for working with paths and nodes. </para>    </briefdescription>
    <detaileddescription>
<para>This class works a lot with the Node class, a useful function to get nodes is <ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member">AstarPath.GetNearest</ref>. <simplesect kind="see"><para><ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member">AstarPath.GetNearest</ref> </para><simplesectsep/><para>Pathfinding.Utils.GraphUpdateUtilities </para></simplesect>
<simplesect kind="since"><para>Added in version 3.2 </para></simplesect>
</para>    </detaileddescription>
    <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/PathUtilities.cs" line="18" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/PathUtilities.cs" bodystart="18" bodyend="103"/>
    <listofallmembers>
      <member refid="class_pathfinding_1_1_path_utilities_1a4b4d32e1cdb83bf4fde98980e16afdc7" prot="public" virt="non-virtual"><scope>Pathfinding::PathUtilities</scope><name>GetReachableNodes</name></member>
      <member refid="class_pathfinding_1_1_path_utilities_1a25736e29fdb41bc3f1d57abeaf2c8eef" prot="public" virt="non-virtual"><scope>Pathfinding::PathUtilities</scope><name>IsPathPossible</name></member>
      <member refid="class_pathfinding_1_1_path_utilities_1acfdea19e38150f03ad8893d9930f1044" prot="public" virt="non-virtual"><scope>Pathfinding::PathUtilities</scope><name>IsPathPossible</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
