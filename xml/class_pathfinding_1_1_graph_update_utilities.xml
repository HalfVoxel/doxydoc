<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="class_pathfinding_1_1_graph_update_utilities" kind="class" prot="public">
    <compoundname>Pathfinding::GraphUpdateUtilities</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_pathfinding_1_1_graph_update_utilities_1a25736e29fdb41bc3f1d57abeaf2c8eef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsPathPossible</definition>
        <argsstring>(GraphNode n1, GraphNode n2)</argsstring>
        <name>IsPathPossible</name>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref></type>
          <declname>n1</declname>
        </param>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref></type>
          <declname>n2</declname>
        </param>
        <briefdescription>
<para>Returns if there is a walkable path from <emphasis>n1</emphasis> to <emphasis>n2</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If you are making changes to the graph, areas must first be recaculated using FloodFill() <simplesect kind="note"><para>This might return true for small areas even if there is no possible path if <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> is greater than zero (0). So when using this, it is recommended to set <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> to 0. (A* Inspector -&gt; Settings -&gt; <ref refid="namespace_pathfinding" kindref="compound">Pathfinding</ref>) </para></simplesect>
<simplesect kind="see"><para><ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member">AstarPath.GetNearest</ref></para></simplesect>
<xrefsect id="deprecated_1_deprecated000019"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function has been moved to Pathfinding.Util.PathUtilities. Please use the version in that class </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" line="29" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_graph_update_utilities_1acfdea19e38150f03ad8893d9930f1044" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsPathPossible</definition>
        <argsstring>(List&lt; GraphNode &gt; nodes)</argsstring>
        <name>IsPathPossible</name>
        <param>
          <type>List&lt; <ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref> &gt;</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
<para>Returns if there are walkable paths between all nodes. </para>        </briefdescription>
        <detaileddescription>
<para>If you are making changes to the graph, areas must first be recaculated using FloodFill() <simplesect kind="note"><para>This might return true for small areas even if there is no possible path if <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> is greater than zero (0). So when using this, it is recommended to set <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> to 0. (A* Inspector -&gt; Settings -&gt; <ref refid="namespace_pathfinding" kindref="compound">Pathfinding</ref>) </para></simplesect>
<simplesect kind="see"><para><ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member">AstarPath.GetNearest</ref></para></simplesect>
<xrefsect id="deprecated_1_deprecated000020"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function has been moved to Pathfinding.Util.PathUtilities. Please use the version in that class </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" line="42" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_graph_update_utilities_1af1d9912f395e3a1b5ef4f21d1f19da74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool UpdateGraphsNoBlock</definition>
        <argsstring>(GraphUpdateObject guo, GraphNode node1, GraphNode node2, bool alwaysRevert=false)</argsstring>
        <name>UpdateGraphsNoBlock</name>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_update_object" kindref="compound">GraphUpdateObject</ref></type>
          <declname>guo</declname>
        </param>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref></type>
          <declname>node1</declname>
        </param>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref></type>
          <declname>node2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysRevert</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Updates graphs and checks if all nodes are still reachable from each other. </para>        </briefdescription>
        <detaileddescription>
<para>Graphs are updated, then a check is made to see if the nodes are still reachable from each other. If they are not, the graphs are reverted to before the update and <emphasis>false</emphasis> is returned.<linebreak/>
 This is slower than a normal graph update. All queued graph updates and thread safe callbacks will be flushed during this function.</para><para><simplesect kind="note"><para>This might return true for small areas even if there is no possible path if <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> is greater than zero (0). So when using this, it is recommended to set <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> to 0 (A* Inspector -&gt; Settings -&gt; <ref refid="namespace_pathfinding" kindref="compound">Pathfinding</ref>)</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guo</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_pathfinding_1_1_graph_update_object" kindref="compound">GraphUpdateObject</ref> to update the graphs with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node1</parametername>
</parameternamelist>
<parameterdescription>
<para>Node which should have a valid path to <emphasis>node2</emphasis>. All nodes should be walkable or <emphasis>false</emphasis> will be returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node2</parametername>
</parameternamelist>
<parameterdescription>
<para>Node which should have a valid path to <emphasis>node1</emphasis>. All nodes should be walkable or <emphasis>false</emphasis> will be returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alwaysRevert</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, reverts the graphs to the old state even if no blocking ocurred </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" line="62" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" bodystart="62" bodyend="70"/>
        <referencedby refid="class_astar_path_1a312d29c6bfc6d0e54b13846b280a7f9f" compoundref="_astar_path_8cs" startline="787" endline="789">AstarPath.WillBlockPath</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_pathfinding_1_1_graph_update_utilities_1afe580774d22ec32a2c7a4ce2cbc4d3fa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool UpdateGraphsNoBlock</definition>
        <argsstring>(GraphUpdateObject guo, List&lt; GraphNode &gt; nodes, bool alwaysRevert=false)</argsstring>
        <name>UpdateGraphsNoBlock</name>
        <param>
          <type><ref refid="class_pathfinding_1_1_graph_update_object" kindref="compound">GraphUpdateObject</ref></type>
          <declname>guo</declname>
        </param>
        <param>
          <type>List&lt; <ref refid="class_pathfinding_1_1_graph_node" kindref="compound">GraphNode</ref> &gt;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysRevert</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Updates graphs and checks if all nodes are still reachable from each other. </para>        </briefdescription>
        <detaileddescription>
<para>Graphs are updated, then a check is made to see if the nodes are still reachable from each other. If they are not, the graphs are reverted to before the update and <emphasis>false</emphasis> is returned. This is slower than a normal graph update. All queued graph updates and thread safe callbacks will be flushed during this function.</para><para><simplesect kind="note"><para>This might return true for small areas even if there is no possible path if <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> is greater than zero (0). So when using this, it is recommended to set <ref refid="class_astar_path_1ac7ba28d0299aca1ddd99f1e4597f50e1" kindref="member">AstarPath.minAreaSize</ref> to 0. (A* Inspector -&gt; Settings -&gt; <ref refid="namespace_pathfinding" kindref="compound">Pathfinding</ref>)</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guo</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_pathfinding_1_1_graph_update_object" kindref="compound">GraphUpdateObject</ref> to update the graphs with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nodes</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespace_pathfinding_1_1_nodes" kindref="compound">Nodes</ref> which should have valid paths between them. All nodes should be walkable or <emphasis>false</emphasis> will be returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alwaysRevert</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, reverts the graphs to the old state even if no blocking ocurred </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" line="85" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" bodystart="85" bodyend="123"/>
        <references refid="class_pathfinding_1_1_graph_update_object_1a47ef15f2ab91e9a4c989a1edea97460a" compoundref="astarclasses_8cs" startline="414">GraphUpdateObject.trackChangedNodes</references>
        <references refid="class_astar_path_1ab2449a5036d440ca6b1763f176cb5836" compoundref="_astar_path_8cs" startline="1801" endline="1865">AstarPath.RegisterSafeUpdate</references>
        <references refid="class_astar_path_1afd00b3509dcd7d1a4ac45bcef6c7e200" compoundref="_astar_path_8cs" startline="64">AstarPath.active</references>
        <references refid="class_astar_path_1ab418dfc993a7451f87bd9c7f9a5b5ef5" compoundref="_astar_path_8cs" startline="810" endline="812">AstarPath.UpdateGraphs</references>
        <references refid="class_astar_path_1a179a53e47931e05581316633e0ec3e15" compoundref="_astar_path_8cs" startline="760" endline="765">AstarPath.QueueGraphUpdates</references>
        <references refid="class_astar_path_1acedbbba05edf74861733bd6ccdd441a3" compoundref="_astar_path_8cs" startline="740" endline="750">AstarPath.ForceCallThreadSafeCallbacks</references>
        <references refid="class_pathfinding_1_1_path_utilities_1a25736e29fdb41bc3f1d57abeaf2c8eef" compoundref="_path_utilities_8cs" startline="25" endline="27">PathUtilities.IsPathPossible</references>
        <references refid="class_pathfinding_1_1_graph_update_object_1a524dc7b9e9a501ba7f3de124d09e6ab6" compoundref="astarclasses_8cs" startline="437" endline="449">GraphUpdateObject.RevertFromBackup</references>
        <references refid="class_astar_path_1a0cbb47a492ef922fb0e0084120ba08a9" compoundref="_astar_path_8cs" startline="1342" endline="1345">AstarPath.FloodFill</references>
        <references refid="class_astar_path_1abbec9f20dfa9724a5fae676b90e89ba2" compoundref="_astar_path_8cs" startline="969" endline="1013">AstarPath.FlushThreadSafeCallbacks</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains useful functions for updating graphs. </para>    </briefdescription>
    <detaileddescription>
<para>This class works a lot with the Node class, a useful function to get nodes is <ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member">AstarPath.GetNearest</ref>.</para><para><simplesect kind="see"><para><ref refid="class_astar_path_1ac28f08f7bddc85579649b5f6ebe57cd4" kindref="member">AstarPath.GetNearest</ref> </para><simplesectsep/><para>Pathfinding.Utils.PathUtilities</para></simplesect>
<simplesect kind="since"><para>Added in 3.1 </para></simplesect>
</para>    </detaileddescription>
    <location file="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" line="18" bodyfile="/Users/aron/Unity/AstarPathfindingGIT/Assets/AstarPathfindingProject/Utilities/GraphUpdateUtilities.cs" bodystart="18" bodyend="124"/>
    <listofallmembers>
      <member refid="class_pathfinding_1_1_graph_update_utilities_1a25736e29fdb41bc3f1d57abeaf2c8eef" prot="public" virt="non-virtual"><scope>Pathfinding::GraphUpdateUtilities</scope><name>IsPathPossible</name></member>
      <member refid="class_pathfinding_1_1_graph_update_utilities_1acfdea19e38150f03ad8893d9930f1044" prot="public" virt="non-virtual"><scope>Pathfinding::GraphUpdateUtilities</scope><name>IsPathPossible</name></member>
      <member refid="class_pathfinding_1_1_graph_update_utilities_1af1d9912f395e3a1b5ef4f21d1f19da74" prot="public" virt="non-virtual"><scope>Pathfinding::GraphUpdateUtilities</scope><name>UpdateGraphsNoBlock</name></member>
      <member refid="class_pathfinding_1_1_graph_update_utilities_1afe580774d22ec32a2c7a4ce2cbc4d3fa" prot="public" virt="non-virtual"><scope>Pathfinding::GraphUpdateUtilities</scope><name>UpdateGraphsNoBlock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
