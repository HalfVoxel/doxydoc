<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="writing-rvo-colliders" kind="page">
    <compoundname>writing-rvo-colliders</compoundname>
    <title>Writing RVO Colliders</title>
    <detaileddescription>
<para>If you read the <ref refid="local-avoidance" kindref="compound">Local Avoidance</ref> tutorial, you should have been through the step where you added an <ref refid="class_r_v_o_simulator" kindref="compound">RVOSimulator</ref>.</para><para>That class is actually a wrapper class for the <ref refid="class_pathfinding_1_1_r_v_o_1_1_simulator" kindref="compound">Pathfinding.RVO.Simulator</ref> class. You can get a reference to it using something like this: <programlisting><codeline><highlight class="normal">Pathfinding.RVO.Simulator<sp/>sim<sp/>=<sp/>(FindObjectOfType(typeof(<ref refid="class_r_v_o_simulator" kindref="compound" tooltip="Unity front end for an RVO simulator.">RVOSimulator</ref>))<sp/>as<sp/><ref refid="class_r_v_o_simulator" kindref="compound" tooltip="Unity front end for an RVO simulator.">RVOSimulator</ref>).GetSimulator<sp/>();<sp/></highlight></codeline>
</programlisting> This simulator has several methods for adding and removing obstacles.</para><para>An obstacle can be added simply by passing a Vector3 array with the outline of the object and a parameter specifying height of the obstacle.</para><para><htmlonly> &lt;div class=&quot;tinyshadow&quot;&gt;&lt;img src=&quot;images/rvo/rvo_outline.png&quot;/&gt;&lt;/div&gt;</htmlonly> The above image shows a good outline for a box obstacle.</para><para>Say we wanted to add a small square obstacle at the world origin.</para><para><programlisting><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>UnityEngine;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SimpleRVOObstacle<sp/>:<sp/>MonoBehaviour<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Start<sp/>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>simulator<sp/>for<sp/>this<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pathfinding.RVO.Simulator<sp/>sim<sp/>=<sp/>(FindObjectOfType(typeof(<ref refid="class_r_v_o_simulator" kindref="compound" tooltip="Unity front end for an RVO simulator.">RVOSimulator</ref>))<sp/>as<sp/><ref refid="class_r_v_o_simulator" kindref="compound" tooltip="Unity front end for an RVO simulator.">RVOSimulator</ref>).GetSimulator<sp/>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Define<sp/>the<sp/>vertices<sp/>of<sp/>our<sp/>obstacle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3[]<sp/>verts<sp/>=<sp/>new<sp/>Vector3[]<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(1,0,-1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(1,0,1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3<sp/>(-1,0,1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3<sp/>(-1,0,-1)};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>our<sp/>obstacle<sp/>to<sp/>the<sp/>simulation,<sp/>we<sp/>set<sp/>the<sp/>height<sp/>to<sp/>2<sp/>units</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim.AddObstacle<sp/>(verts,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>It should be quite self-explanatory. If you put it in a script and add it to any GameObject in the scene and then play the game, you should notice that no agents will be able to traverse the world origin they will be blocked by the obstacle we added.</para><para>It is important to know that the order of the vertices matter, clockwise polygons will shut agents in but let them move freely into it, as opposed to counter-clockwise polygons will keep agents out from it, but if they are inside it for some reason, they can move out from it easily. You can see the effect easily if you add the line <programlisting><codeline><highlight class="normal">System.Array.Reverse<sp/>(verts);<sp/></highlight></codeline>
</programlisting> Just after defining the vertices in the above script. When the agents move into the square, they will be trapped.</para><para>You can also add obstacles as individual edges with the syntax: <programlisting><codeline><highlight class="normal">sim.AddObstacle<sp/>(firstPoint,<sp/>secondPoint,<sp/>height);<sp/></highlight></codeline>
</programlisting></para><para>These will be seen as convex polygons so agents will not be able to move through them in any direction.</para><para><simplesect kind="see"><para><ref refid="class_pathfinding_1_1_r_v_o_1_1_simulator" kindref="compound">Pathfinding.RVO.Simulator</ref></para></simplesect>
To make it easier for you, there are already a few built-in &quot;colliders&quot;. You can find them under Components -&gt; Local Avoidance. For easier creation of your custom colliders, you can take a look at the docs for <ref refid="class_r_v_o_obstacle" kindref="compound">RVOObstacle</ref>. </para>    </detaileddescription>
  </compounddef>
</doxygen>
