<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="upgrading" kind="page">
    <compoundname>upgrading</compoundname>
    <title>Upgrade Guide</title>
    <detaileddescription>
<para>======================================================== ======== Upgrading from older versions ================= ========================================================</para><para>Read the respective sections on how to upgrade from older versions</para><para>======================================================== ======== General importing and upgrading tips ========== ========================================================</para><para>If you are having problems upgrading. If you see compiler errors for example Try to delete the AstarPathfindingProject folder in Unity and import the package again. This can help removing old scripts which are not included in the project anymore but since UnityPackages merges directories, they are still there.</para><para>If you have problems with some compiler messages saying that some members or functions do not exist in a class. It is likely that your project contains a class with that name in the global namespace. This causes a conflict between the classes. To solve it, the simplest solution is to put the conflicting class in a namespace or just rename it.</para><para>======================================================== ======== Upgrading from 3.1.x to 3.2.x ================= ========================================================</para><para>Note that A* <ref refid="namespace_pathfinding" kindref="compound">Pathfinding</ref> Project 3.2 dropped support for Unity 3.4</para><para>Syntax has changed a bit for the 3.2.x version to make path pooling as streamlined as possible You might not need to change anything, but if you are creating new paths manually, e.g using:</para><para>Path p = new Path (startPoint, endPoint, callback);</para><para>You will now need to change that. Path is a now an abstract class, and the basic path which calculates a path from a point A to a point B is now called ABPath. Constructors are not used either instead static Construct methods are used. These will use pooled paths if possible</para><para>ABPath p = ABPath.Construct (startPoint, endPoint, callback);</para><para>All path types implement Construct methods in a similar fashion.</para><para>-------------------------------------</para><para>The vectorPath and path arrays on path objects are now List&lt;Vector3&gt; and List&lt;Node&gt; respectively. This is done so that they can be reused if the path object is recycled.</para><para>-------------------------------------</para><para>If you have been getting the closest node to a point with</para><para>Node node = AstarPath.active.GetNearest(somePosition);</para><para>You will now have to either explicitly cast from NNInfo (which the GetNearest function actually returns) or get the node by the .node field</para><para>Node node = AstarPath.active.GetNearest(somePosition).node;</para><para>See changelog for more changes.</para><para>======================================================== ======== Upgrading from 3.0.x versions ================= ========================================================</para><para>If you are upgrading from versions earlier than 3.1 your settings for each graph might be lost during the upgrade process. Please back up your project before upgrading (well, if you are reading this notice, I can just hope that you have seen the messages about this on other places)</para><para>Note that A* <ref refid="namespace_pathfinding" kindref="compound">Pathfinding</ref> Project 3.1 dropped support for Unity 3.3</para><para>If you have written code interfacing with the system, you might need to update it:</para><para>The serialization API has changed a bit for 3.1 see docs for new api. Int3 is no longer implicitly convertible to Vector3 so for example if you do something like Debug.Log (someNode.position) You will now have to write Debug.Log ((Vector3)someNode.position</para><para>These were the most important changes, for more changes, see the change log. <ulink url="http://arongranberg.com/astar/docs/changelog.php">http://arongranberg.com/astar/docs/changelog.php</ulink></para><para>======================================================== ======== Upgrading from very old versions (2.x) ======== ========================================================</para><para>When upgrading from 2.9x to 3.0 there are a few things you need to do to make it work.</para><para><itemizedlist>
<listitem><para>Backup your project is always a good idea since 3.0 will not be able to read settings from 2.x</para></listitem><listitem><para>Remove the A* scripts in the Assets/Editor folder</para></listitem><listitem><para>Remove the Assets/Editor Default Resources folder</para></listitem><listitem><para>Remove the Assets/Pathfinding folder</para></listitem><listitem><para>Import the 3.0 Unity Package, DO NOT copy the files from another project directly since GUISkins and other assets might get corrupted then</para></listitem><listitem><para>All GameObjects which had the <ref refid="class_seeker" kindref="compound">Seeker</ref> or the <ref refid="class_astar_path" kindref="compound">AstarPath</ref> component attached to them will now show up as Missing Script. You will need to reattach the components to the GameObjects</para></listitem><listitem><para>The syntax for path calls has changed a bit<linebreak/>
 2.9x syntax: <programlisting><codeline><highlight class="normal">seeker.<ref refid="class_seeker_1ad9c281f768379478a6a3671a53e09113" kindref="member" tooltip="Call this function to start calculating a path.">StartPath</ref><sp/>(fromPosition,targetPosition);<sp/></highlight></codeline>
</programlisting> 3.x syntax: <programlisting><codeline><highlight class="normal">seeker.<ref refid="class_seeker_1ad9c281f768379478a6a3671a53e09113" kindref="member" tooltip="Call this function to start calculating a path.">StartPath</ref><sp/>(fromPosition,targetPosition,<sp/>OnPathComplete);<sp/></highlight></codeline>
</programlisting> In 2.9x the <ref refid="class_seeker" kindref="compound">Seeker</ref> sent completed paths using SendMessage as a Vector3 array<linebreak/>
 3.0 will send a callback using a delegate to a specified function, doesn&apos;t matter if the path succeeded or not, it will always call that function except in the case where the path was canceled by a new path call to the same <ref refid="class_seeker" kindref="compound">Seeker</ref> before the path had time to complete <programlisting><codeline><highlight class="comment">//The<sp/>name<sp/>of<sp/>the<sp/>function<sp/>can<sp/>be<sp/>anything,<sp/>but<sp/>it<sp/>must<sp/>always<sp/>have<sp/>the<sp/>same<sp/>parameters<sp/>(Path)<sp/>the<sp/>name<sp/>of<sp/>the<sp/>parameter<sp/>(in<sp/>this<sp/>case<sp/>p)<sp/>can<sp/>vary<sp/>though</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnPathComplete<sp/>(Path<sp/>p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>the<sp/>path<sp/>succeeded</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.error)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Path<sp/>succeeded</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>Vector3<sp/>path<sp/>can<sp/>be<sp/>got<sp/>from<sp/>p.vectorPath<sp/>(Vector3[])</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Path<sp/>did<sp/>not<sp/>succeed</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Error<sp/>info<sp/>can<sp/>be<sp/>got<sp/>from<sp/>p.errorLog<sp/>(string)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Worth<sp/>to<sp/>note<sp/>here<sp/>is<sp/>that<sp/>you<sp/>should<sp/>never<sp/>call<sp/>the<sp/>Seeker<sp/>again<sp/>during<sp/>the<sp/>same<sp/>frame<sp/>unless<sp/>you<sp/>really<sp/>know<sp/>what<sp/>you<sp/>are<sp/>doing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Since<sp/>if<sp/>the<sp/>path<sp/>fails,<sp/>it<sp/>often<sp/>returns<sp/>to<sp/>the<sp/>function<sp/>the<sp/>same<sp/>frame<sp/>which<sp/>would<sp/>then<sp/>call<sp/>another<sp/>path<sp/>call<sp/>which<sp/>would<sp/>be<sp/>returned<sp/>the<sp/>same<sp/>frame<sp/>and<sp/>it<sp/>would<sp/>cause<sp/>an<sp/>infinite<sp/>loop<sp/>which<sp/>would<sp/>crash<sp/>Unity.<sp/>And<sp/>in<sp/>any<sp/>case<sp/>you<sp/>rarely<sp/>need<sp/>updates<sp/>of<sp/>the<sp/>path<sp/>several<sp/>times<sp/>per<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight></codeline>
</programlisting> More info about the seeker&apos;s path calls can be found on the <ref refid="getstarted" kindref="compound">Get Started With the A* Pathfinding Project </ref> page</para></listitem><listitem><para>The syntax for graph updating has changed a bit, see <ref refid="graph-updates" kindref="compound">Graph Updates during Runtime</ref> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
